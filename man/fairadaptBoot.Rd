% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fairadapt-boot.R
\name{fairadaptBoot}
\alias{fairadaptBoot}
\title{Fairadapt Boostrap wrapper}
\usage{
fairadaptBoot(
  formula,
  prot.attr,
  adj.mat,
  train.data,
  test.data = NULL,
  cfd.mat = NULL,
  top.ord = NULL,
  res.vars = NULL,
  quant.method = rangerQuants,
  save.object = FALSE,
  n.boot = 100,
  rand.mode = c("finsamp", "quant", "both"),
  ...
)
}
\arguments{
\item{formula}{Object of class `formula` describing the response and
the covariates.}

\item{prot.attr}{A value of class `character` describing the binary
protected attribute. Must be one of the entries of `colnames(adj.mat)`.}

\item{adj.mat}{Matrix of class `matrix` encoding the relationships in
the causal graph. `M[i,j] == 1L` implies the existence of an edge from
node i to node j. Must include all the variables appearing in the formula
object. When the `adj.mat` argument is set to `NULL`, then the
`top.ord` argument has to be supplied.}

\item{train.data, test.data}{Training data & testing data, both of class
`data.frame`. Test data is by default `NULL`.}

\item{cfd.mat}{Symmetric matrix of class `matrix` encoding the
bidirected edges in the causal graph. `M[i,j] == M[j, i] == 1L`
implies the existence of a bidirected edge between nodes i and j. Must
include all the variables appearing in the formula object.}

\item{top.ord}{A vector of class `character` describing the
topological ordering of the causal graph. Default value is `NULL`,
but this argument must be supplied if `adj.mat` is not specified.
Also must include all the variables appearing in the formula object.}

\item{res.vars}{A vector of class `character` listing all the resolving
variables, which should not be changed by the adaption procedure. Default
value is `NULL`, corresponding to no resolving variables. Resolving
variables should be a subset of the descendants of the protected attribute.}

\item{quant.method}{A function choosing the method used for quantile
regression. Default value is `rangerQuants` (using random forest
quantile regression). Other implemented options are `linearQuants` and
`mcqrnnQuants`. A custom function can be supplied by the user here,
and the associated method for the S3 generic `computeQuants` needs to be
added.}

\item{save.object}{a `logical` scalar, indicating whether all the
`fairadapt` S3 objects built in bootstrap repetitions should be saved.}

\item{n.boot}{An integer corresponding to the umber of bootstrap iterations.}

\item{rand.mode}{A string, taking values `"finsamp"`, `"quant"` or `"both"`,
corresponding to considering finite sample uncertainty, quantile
uncertainty, or both.}

\item{...}{Additional arguments forwarded to the function passed as
`quant.method`.}
}
\value{
An object of class `fairadaptBoot`, containing the original and
adapted training and testing data, together with the causal graph and some
additional meta-information.
}
\description{
The wrapper function for performing bootstrap uncertainty quantification for
the `fairadapt()` function.
}
\examples{
uni.adj.mat <- array(0, dim = c(4, 4))
colnames(uni.adj.mat) <- rownames(uni.adj.mat) <-
  c("gender", "edu", "test", "score")

uni.adj.mat["gender", c("edu", "test")] <-
  uni.adj.mat["edu", c("test", "score")] <-
  uni.adj.mat["test", "score"] <- 1L

FA <- fairadapt(score ~ .,
  train.data = uni_admission[1:100, ],
  test.data = uni_admission[101:150, ],
  adj.mat = uni.adj.mat, prot.attr = "gender")

FA

}
\references{
Plecko, D. & Meinshausen, N. (2019).
Fair Data Adaptation with Quantile Preservation \cr
}
